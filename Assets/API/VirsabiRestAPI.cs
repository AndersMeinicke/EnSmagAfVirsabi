using Proyecto26;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using UnityEngine;

/// <summary>
/// this only works for google firebase
/// </summary>
public class VirsabiRestAPI : MonoBehaviour
{
    [SerializeField] private bool dontDestroyOnLoad;

    public static VirsabiRestAPI Instance;

    private string serverSecret;

    // Start is called before the first frame update
    void Start()
    {
        //this secret gives FULL access to the database, so in theory if someone decompiled our app they could get access - but thats doubtable for now.
        serverSecret = "xn6sCyjisFa5VDroMjPwShwDIP7Z49Xw0JzmGWaM";

        //RestClient.DefaultRequestHeaders["Authorization"] = "Bearer " + serverSecret;
    }

    private void Awake()
    {
        if (!Instance)
            Instance = this;
        else
        {
            Debug.LogError("Multiple Singletons!");
            if(dontDestroyOnLoad)
                Destroy(this.gameObject);
        }
    }

    /// <summary>
    /// Generic Rest API method for uploading an object.
    /// </summary>
    /// <typeparam name="T">Object type</typeparam>
    /// <param name="item">Object</param>
    /// <param name="path">URL path</param>
    public void PostNewObject<T>(string path, T item)
    {
        print("Posting New Object...");
        RestClient.Post<T>(path + ".json" + "?auth=" + serverSecret, item).Then(response =>
        {
            print("JSON : " + JsonUtility.ToJson(response, true));
        });
    }


    /// <summary>
    /// Updates a generic list of objects from a dictionary containing unique keys (like the ones genered by PUSH on Firebase)
    /// </summary>
    /// <typeparam name="T">Type of object to update</typeparam>
    /// <param name="path">the path to objects</param>
    /// <param name="allItems">the list of objects to be updated</param>
    public void GetListWithAut<T>(string path, List<T> allItems)
    {
        RestClient.Get(path + ".json" + "?auth=" + serverSecret).Then(response => {
            print("JSON Array Downloaded: " + response.Text);

            Dictionary<string, T> tempDictionary = MapObjectsToKeys<T>(response.Text);


            foreach (KeyValuePair<string, T> kvp in tempDictionary)
            {
                //Uncomment if you want to see output
                //print("key: " + kvp.Key + "    " + " value: " + kvp.Value);
                allItems.Add(kvp.Value);
            }

            return allItems;
        });
    }

    public static void GetJsonList<T>(string path, List<T> allItems)
    {
        RestClient.Get(path).Then(response => {
            //print("Array Downloaded: " + response.Text);

            //IMPORTANT! We cannot directly change the reference of the list (by doing allItems = new list), but we can add to it.
            List<T> tempItems = JsonHelper.FromJsonString<T>(response.Text).ToList();

            //Debug.LogWarning("length: " + allItems.Count);

            foreach (var item in tempItems)
            {
                //Debug.Log(item);
                allItems.Add(item);
            }


            return allItems;
        });
    }

    /// <summary>
    /// Method for mapping the unique key generated by google firebase
    /// </summary>
    /// <param name="json">The Json Data containing the objects and keys</param>
    /// <returns></returns>
    public static Dictionary<string, T> MapObjectsToKeys<T>(string json)
    {
        Dictionary<string, T> myDictionary;
        using (MemoryStream jStream = new MemoryStream(Encoding.Unicode.GetBytes(json)))
        {
            DataContractJsonSerializerSettings settings = new DataContractJsonSerializerSettings();
            settings.UseSimpleDictionaryFormat = true;

            var serializer = new DataContractJsonSerializer(typeof(Dictionary<string, T>), settings);
            myDictionary = serializer.ReadObject(jStream) as Dictionary<string, T>;
        }

        return myDictionary;
    }

    public void Delete(string path)
    {
        RestClient.Delete(path + ".json" + "?auth=" + serverSecret).Then(response => {
            print("Deleted " + path);
        });
    }

    //These methods are not fully implemented or working with firebase

    /// <summary>
    /// Not fully implemented - 
    /// Get method downloading data
    /// </summary>
    /// <param name="path">Path for getting data</param>
    /// <param name="data">The serilizable object to be updated from json file</param>
    public void Get(string path, string data)
    {
        //object dowloadedData;

        RestClient.Get(path + ".json")
            .Then(response => {
                print(response.Text);
                data = JsonUtility.ToJson(response.Text, true);
            })
            .Catch(err => print("Error" + err.Message)); ;

    }

    /// <summary>
    /// Not fully implemented - 
    /// Generic method for getting an array of objects - does not work if unique identifiers are used (like with google firebase). 
    /// Only works for pushed items structured by "/1", "/2", etc.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="path"></param>
    /// <param name="items"></param>
    public void GetArray<T>(string path, List<T> items)
    {
        RestClient.GetArray<T>(path + ".json").Then(downloadedItems => {
            print("JSON Array" + JsonHelper.ArrayToJsonString<T>(downloadedItems, true) + "Ok");


            foreach (T item in downloadedItems)
            {
                items.Add(item);
                print("element: " + item.ToString());
            }
        });
    }

    /// <summary>
    /// Not fully Implemented - 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="path"></param>
    public void GetSingleObject<T>(string path)
    {
        RestClient.Get<T>(path + ".json").Then(firstPhase =>
        {
            print(JsonUtility.ToJson(firstPhase, true));
        });
    }
}
